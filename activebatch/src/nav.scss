@use "sass:math";
@use "sass:map";
// 1. Include functions first (so you can manipulate colors, SVGs, calc, etc)
@import '../../node_modules/bootstrap/scss/functions';

// 2. Include any default variable overrides here
$primary: #00b16b;
$secondary: #04213f;
$tertiary: #65c261;
$quaternary: #eafef4;
$accent: #E24650;
$dark: $secondary;
$light: #f7f7f7;

// --ff-body: "soleto", sans-serif;
// --ff-titles: "prometo", sans-serif;

// 3. Include remainder of required Bootstrap stylesheets (including any separate color mode stylesheets)
$enable-negative-margins: true;



@import '../../node_modules/bootstrap/scss/variables';

$font-family-base: "Roboto", sans-serif;
$font-weight-base: $font-weight-normal;

$paragraph-margin-bottom: 0;

$headings-font-family:   "Archivo", sans-serif;
$headings-margin-bottom: 0;
$headings-font-weight:   $font-weight-semibold;
$headings-line-height:   1.2;

$display-font-family: $headings-font-family;
$display-font-weight: $font-weight-semibold;

$link-decoration: none;

$min-contrast-ratio: 2.7;
$theme-colors: map-merge(
	(
		'primary':    $primary,
		'secondary':  $secondary,
		'tertiary':   $tertiary,
		'quaternary': $quaternary,
		'accent':     $accent
	),
	$theme-colors
);

$colors: map-remove($colors, 'blue', 'indigo', 'purple', 'pink', 'orange', 'yellow', 'green', 'teal', 'cyan');

$enable-cssgrid: true;
$grid-breakpoints: (
	xs: 0,
	sm: 36rem,
	md: 48rem,
	lg: 62rem,
	xl: 80rem,
	xxl: 100rem,
);
$container-padding-x: clamp(1rem, 5vw, 4rem);

$enable-responsive-font-sizes: true;
$spacer: 1rem;
$spacer-levels: 10;
$spacer-scale: 1.33;
$spacers: ();

@for $level from ($spacer-levels * -1) through $spacer-levels {
    @if $level < 0 {
        $spacers: map.merge(
            $spacers, 
            ( #{"\\{" + math.abs($level) + "\\}"}: $spacer * math.pow($spacer-scale, $level + 1) )
        );
    }
    
    @if $level == 0 {
        $spacers: map.merge( $spacers, ( 0 : 0 ) );
    }
    
    @else {
        $spacers: map.merge( 
            $spacers, 
            ( $level: $spacer * math.pow($spacer-scale, $level - 1) )
        );
    }
}

$spacers: map.merge($spacers, $spacers);


// 4. Include any default map overrides here

// 5. Include remainder of required parts
@import '../../node_modules/bootstrap/scss/maps';
@import '../../node_modules/bootstrap/scss/mixins';
@import '../../node_modules/bootstrap/scss/root';

$utilities: (
	"justify-items": (
      responsive: true,
      property: justify-items,
      values: (
        start: flex-start,
        end: flex-end,
        center: center,
        between: space-between,
        around: space-around,
        evenly: space-evenly,
      )
    ),
);
// 6. Optionally include any other parts as needed
@import '../../node_modules/bootstrap/scss/utilities';


.text {
	&-balance {
		text-wrap: balance;
	}
}

.\@hover {
	@at-root [class*='\@hover'] {
		transition: $transition-base;
	}
	@each $color, $value in $theme-colors {
		&\:bg-#{$color} {
			&:hover {
				background-color: var(--#{$prefix}#{$color}) !important;
			}
		}

		&\:#{$color} {
			&:hover {
				color: var(--#{$prefix}#{$color}) !important;
			}
		}

		&\:border-#{$color} {
			&:hover {
				border-color: var(--#{$prefix}#{$color}) !important;
			}
		}
	}
}

@import "../../node_modules/bootstrap/scss/reboot";
@import "../../node_modules/bootstrap/scss/type";
@import "../../node_modules/bootstrap/scss/images";
@import "../../node_modules/bootstrap/scss/containers";
@import "../../node_modules/bootstrap/scss/grid";
@import '../../node_modules/bootstrap/scss/helpers';
@import '../../node_modules/bootstrap/scss/transitions';
@import '../../node_modules/bootstrap/scss/nav';
@import '../../node_modules/bootstrap/scss/tables';
@import '../../node_modules/bootstrap/scss/forms';

$btn-border-radius:    10rem;
$btn-padding-y:        .8em;
$btn-padding-x:        3em;
$btn-font-family:      $headings-font-family;
$btn-font-size:        .8rem;
$btn-font-weight:      $font-weight-medium;
$btn-line-height:      1;
$btn-white-space:      nowrap;

$btn-font-size-sm:     $btn-font-size * 0.8;
$btn-border-radius-sm: $btn-border-radius; 
$btn-padding-y-sm:     $btn-padding-y;
$btn-padding-x-sm:     $btn-padding-x;

$btn-font-size-lg:     $btn-font-size * 1.2;
$btn-border-radius-lg: $btn-border-radius; 
$btn-padding-y-lg:     $btn-padding-y;
$btn-padding-x-lg:     $btn-padding-x;

@import '../../node_modules/bootstrap/scss/buttons';

$carousel-indicator-opacity: .5;
$carousel-indicator-active-bg: $primary;
$carousel-indicator-spacer: .4rem;
$carousel-indicator-width: .6rem;
$carousel-indicator-height: $carousel-indicator-width;

@import '../../node_modules/bootstrap/scss/carousel';


/**
 * Bootstrap Carousel Overrides
 */
.carousel {
    overflow: hidden;

    &-indicators {
        > [data-bs-target] {
            all: unset;
            --size: #{$carousel-indicator-width};
            text-indent: -999vw;
            box-sizing: border-box;
            width: var(--size);
            height: var(--size);
            border-radius: 50%;
            background-color: var(--color, var(--#{$prefix}white));
            border: 0.065rem solid var(--color);
            flex: 0 1 auto;
            cursor: pointer;
            margin: 1rem $carousel-indicator-spacer;

            &.active {
                --color: #{$carousel-indicator-active-bg};
            }
        }
    }
}


// 7. Optionally include utilities API last to generate classes based on the Sass map in `_utilities.scss`
@import '../../node_modules/bootstrap/scss/utilities/api';

::selection {
    background-color: var(--selection, var(--#{$prefix}primary));
    color: var(--selection, var(--#{$prefix}white))
}

b,
strong {
    font-weight: $font-weight-semibold;
}

img {
    object-fit: contain;
}
summary {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1em;
    appearance: none;
    list-style: none !important;

    &::-webkit-details-marker {
        display: none
    }
    &::after {
        content: "";
        display: block;
        width: .7em;
        height: auto;
        aspect-ratio: 1 / 1;
        background-image: url('data:image/svg+xml,<svg width="20" height="13" viewBox="0 0 20 13" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M2 2L10 10L18 2" stroke="black" stroke-width="4" stroke-linecap="round"/></svg>');
        background-repeat: no-repeat;
        background-position: center;
        background-size: contain;
        transition: rotate .2s ease;
        flex-shrink: 0;
    }
}

details:not([open]) summary::after { rotate: -90deg }

ul, ol {
    margin: 0;
}

/* My body don't */
@keyframes jiggle {
	0% {
		transform: translateX(0);
	}
	25% {
		transform: translateX(-0.5ch);
	}
	50% {
		transform: translateX(0.5ch);
	}
	75% {
		transform: translateX(-0.5ch);
	}
	100% {
		transform: translateX(0);
	}
}

@keyframes loading {
	0% {
		background-position: right;
	}
}

.c-form {
	/* API */
	--c-form-global-accent-color: var(--bs-primary);
	--c-form-global-bg-color: transparent;
	--c-form-global-text-color: inherit;
	--c-form-global-warning-color: var(--bs-danger);
	--c-form-global-width: 100%;

	--c-form-control-text-color: var(--bs-dark);
	--c-form-control-border-color: var(--c-form-control-text-color, var(--bs-dark));
	--c-form-control-focus-border-color: var(--c-form-global-accent-color, currentColor);
	--c-form-control-border-radius: initial;
	--c-form-control-border-style: solid;
	--c-form-control-border-width: 1px;
	--c-form-control-gap: clamp(0.6rem, 1.5vw, 1.2rem);

    --c-form-control-checkbox-border-width: max( .15em, var(--c-form-control-border-width) );
    --c-form-control-checkbox-indicator-color: transparent;

	background-color: var(--c-form-global-bg-color);
	border-radius: var(--c-form-control-border-radius);
	background-color: var(--c-form-global-bg-color);
	color: var(--c-form-global-text-color);
	width: clamp(var(--c-form-global-width), 100%);

	position: relative;
	display: flex;
	flex-flow: column;
	align-items: center;
	justify-content: center;
    text-align: left;
	font-size: 0.9rem;

	::placeholder {
		opacity: 1;
		color: currentColor;
	}

	&:is(
        [data-state="submitting"], 
        [data-state="submitted"]
    ) input[type="submit"]:is(:enabled, :focused, :active, :disabled) {
		background-color: var(--bs-secondary-bg-subtle);
		pointer-events: none;
		cursor: not-allowed;
	}

	*:not([class*="fa"]) {
		font-size: inherit;
		margin: 0;
	}

	:is(input, select, textarea) {
		--c-form-control-state-color: var(--c-form-control-border-color);
	}

	:is(input, select, textarea):focus-visible {
		--c-form-control-state-color: var(--c-form-global-accent-color);
	}

	.invalid:not(:placeholder-shown, :focus) {
		--c-form-control-state-color: var(--c-form-global-warning-color);
		color: var(--c-form-control-state-color);
		animation: jiggle 0.4s ease;
	}

	:is(
        input:is(
            [type="text"], 
            [type="email"], 
            [type="password"], 
            [type="tel"], 
            [type="number"]
        ), 
        select, 
        textarea
    ):is(:enabled, :focus-visible) {
		border-style: var(--c-form-control-border-style);
		border-color: var(--c-form-control-state-color);
		border-width: var(--c-form-control-border-width);
		border-radius: var(--c-form-control-border-radius);
        color: var(--c-form-control-text-color);
		padding: 0.6em 1em;
		outline: none;
		appearance: none;
		width: 100%;
	}

    [type="checkbox"] { 
        appearance: none;
        cursor: pointer;
        color: var(--c-form-control-checkbox-indicator-color);
        border-style: var(--c-form-control-border-style);
		border-color: var(--c-form-control-state-color);
		border-width: var(--c-form-control-checkbox-border-width);
        width: 1.5em;
        height: auto;
        aspect-ratio: 1 / 1;
        border-radius: 0.4em;
        background-color: transparent;
        position: relative;
        transition: background-color .2s ease;
        outline: none;

        &:checked {
            --c-form-control-state-color: var(--c-form-global-accent-color);
            --c-form-control-checkbox-indicator-color: var(--bs-white);
            background-color: var(--c-form-global-accent-color);
        }

        &::before {
            content: "";
            color: inherit;
            display: block;
            position: absolute;
            width: 40%;
            height: auto;
            aspect-ratio: 1 / 1.8;
            border-color: transparent currentColor currentColor transparent;
            border-style: inherit;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -63%) rotateZ(45deg);
            pointer-events: none;
            border-width: 0 var(--c-form-control-checkbox-border-width) var(--c-form-control-checkbox-border-width) 0;
            transition: color .2s ease;
        }
    }
    
	a:any-link {
		color: var(--c-form-global-accent-color);
	}

	label[for],
	legend {
		font-weight: 700;
		
		&:not([class*="hs"], :has(~ .input .multi-container)) {
		   display: none !important;
	    }
	}
	
	.cookie-reset-container {
		color: currentColor;
		font-size: 0.9em;
		font-weight: 500;
	}

	.cookie-reset-container u {
		color: var(--c-form-global-warning-color);
		text-decoration-style: dotted;
	}

	.cookie-reset-container :is(a, a:hover) {
		background-color: var(--c-form-global-accent-color);
		color: var(--bs-dark);
		padding: 0.2em 0.8em;
		border-radius: 10rem;
		text-decoration: none;
		white-space: nowrap;
		font-size: 0.95em;
        cursor: pointer;
        margin-left: .2em;
	}

    .inputs-list {
        list-style: none;
        padding: 0;

        &.multi-container {
            display: grid;
            gap: calc(var(--c-form-control-gap) * 0.6);
			margin: 0;
			font-size: 0.9em;
			grid-template-columns: repeat(auto-fit, minmax(min(50%, 16ch), 1fr));
        }
    }

	.hbspt-form {
		width: 100%;
	}
    

	.hs-form {
		width: 100%;

        &-booleancheckbox, 
        &-checkbox {
            &-display {
				font-weight: 600;
                color: var(--c-form-control-text-color);
                user-select: none;
                padding: .8em;
                background: var(--light);
                width: 100%;
                display: flex;
                align-items: center;
                gap: calc( var(--c-form-control-gap) / 2 );
                cursor: pointer;
                border: max(var(--c-form-control-border-width), .12em) solid var(--c-form-control-state-color, var(--gray));
                border-radius: var(--c-form-control-border-radius);
                transition: border-color .3s ease;

                &:is(
                    :hover,
                    :has(input:checked) 
                )  {
                    --c-form-control-state-color: var(--c-form-global-accent-color);
                }
            }

        }
	}

	.hs-error-msgs {
		color: var(--c-form-global-warning-color);
		font-size: 0.8em;
		padding: 0;
		margin: 0;
		list-style: none;
		font-weight: initial;
	}

	// Stacked Variation

	&--stacked {
		--c-form-control-border-radius: 0.4rem;
		min-height: 15em;

		.hs-form {
			display: grid;
			gap: var(--c-form-control-gap);
			// > *:not(:first-child, .hs-submit) {
			// 	margin-top: var(--c-form-control-gap);
			// }

			.hs-form-field {
				max-width: 100%;
				display: inherit;
				gap: calc(var(--c-form-control-gap) * 0.6);
			}

			// .hs-submit {
			// 	margin-top: min(1.7em, var(--c-form-control-gap) * 1.7);
			// }
		}
	}

	// Single field

	&--single {
		--c-form-control-border-radius: 10rem;
		--c-form-control-border-width: 1px;
		--c-form-global-bg-color: var(--bs-white);
		border-style: var(--c-form-control-border-style);
		border-color: var(--c-form-control-state-color);
		border-width: var(--c-form-control-border-width);
        width: clamp(35ch, 10em, 100%);

        &:not([data-state="loaded"], [data-state="submitting"]) {
            min-height: 3.2em;
        }

		&:focus-within {
			--c-form-control-state-color: var(--c-form-global-accent-color);
		}

        &::before {
            bottom: 0;
            right: 0;
            height: min(3.2em, 100%);
            width: 10em;
            background: var(--c-form-global-accent-color);
            z-index: 1;
        }

		input,
		input:focus {
			--c-form-control-border-width: 0;
		}

		.hs-form {
			display: flex;

			> .hs-form-field {
				flex: 1 1 0;
			}

            .input {
                height: 100%;
                display: flex;
                align-items: center;
            }

			.hs-error-msgs {
				position: absolute;
				top: 100%;
				left: 0;
			}

			.hs_error_rollup {
				display: none;
			}
		}
	}
}


svg:has(path:only-child) {
    transition: translate .2s ease;

    &:is(a:hover > &) {
        translate: .5ch;
    }
}
.sr-only {
	border: 0 !important;
	clip: rect(1px, 1px, 1px, 1px) !important;
	-webkit-clip-path: inset(50%) !important;
	clip-path: inset(50%) !important;
	height: 1px !important;
	margin: -1px !important;
	overflow: hidden !important;
	padding: 0 !important;
	position: absolute !important;
	width: 1px !important;
	white-space: nowrap !important;
}

.text-accent {
	color: var(--bs-accent);
}

.mega_navigation {
	position: sticky;
	top: 0;
	z-index: 2000;
	width: 100%;
	overscroll-behavior: contain;
	box-sizing: border-box;
	--menu--bg-color: #051421;
	--menu--mobile-shadow: 0 7px 22px -18px rgba(0, 0, 0, 0.25), 0 39px 37px 3px rgba(0, 0, 0, 0.05);
	--menu--desktop-shadow: 0 4px 7px 0 rgba(0, 0, 0, 0.25);
	--menu--transition: .3s ease-in;
	--menu--border-top: .375rem .375rem 0 0;
	--menu--border-bottom: 0 0 .375rem .375rem;
	--menu--toggle-line-width: 3px;
	> * {
		box-sizing: border-box;
	}
	a {
		text-decoration: none;
        font-weight: inherit;
	}

	&__bar {
		padding: clamp(1em, 2vw, 1.5em) max(1.5em, (100vw - 90rem) / 2);
		font-size: 1rem;
		color: var(--bs-white);
		background-color: var(--menu--bg-color);
		line-height: 1.4;
		gap: 0 clamp(1em, 3vw, 4em);
		display: grid;
		@include media-breakpoint-up(lg) {
			grid-template-columns: auto 1fr auto;
			grid-template-areas: '🌶️ 🍰 🎉';
			font-size: clamp(0.7rem, 1vw, 0.8rem);
			align-items: center;
		}

		@include media-breakpoint-down(lg) {
			grid-template-columns: 1fr auto;
			grid-template-areas: '🌶️ 🍔';
		}
	}

	&__holder {
		min-height: 32px; // prevent layout shift
		grid-area: 🌶️;
		display: flex;
		flex-direction: row;

		.mega_navigation__logo {
			color: var(--bs-white);
			align-self: center;
			&:hover {
				color: inherit;
			}
			svg {
				width: clamp(8em, 20vw, 12em);
				display: block !important;
			}
		}
	}

	&__get_demo {
		grid-area: 🎉;
		@include media-breakpoint-down(lg) {
			display: none;
		}
	}
	&__toggle,
	&__back button {
		appearance: none;
		background: none;
		border: none;
		line-height: 0;
		color: inherit;
		cursor: pointer;
	}
	&__toggle {
		grid-area: 🍔;
		width: 1.3em;
		aspect-ratio: 1 / 1;
		position: relative;
		align-self: center;

		@include media-breakpoint-up(lg) {
			display: none;
		}

		&::after,
		&::before {
			content: '';
			height: var(--menu--toggle-line-width);
			rotate: calc(var(--menu--toggle-rotation-direction, 1) * var(--menu--toggle-angle, 45deg));
			translate: 0 calc(var(--menu--toggle-offset, 0) * var(--menu--toggle-rotation-direction, 1));
			top: calc(50% - (var(--menu--toggle-line-width) / 2));
			display: block;
			left: 0;
			background: currentColor;
			width: 100%;
			transition: rotate 0.2s ease var(--menu--toggle-rotation-delay, 0.2s), translate 0.2s ease;
			position: absolute;
			border-radius: 100rem;
		}

		&::after {
			--menu--toggle-rotation-direction: -1;
		}
	}
	&__overlay {
		user-select: none;
		pointer-events: none;
		background-color: rgba(0, 0, 0, 0.9);
		position: absolute;
		inset: 0;
		z-index: 15;
	}
	.mega_menu {
		grid-area: 🍰;
		width: 100%;

		&__items {
			overflow: hidden;
			list-style: none;
			margin: 0;
			padding: 0;
			display: flex;
			flex-direction: row;
			gap: clamp(1em, 3vw, 4em);
		}

		&__item {
			display: inline-block;
			cursor: pointer;
			user-select: none;
			color: var(--bs-white);
			font-size: clamp(0.7rem, 1vw, 0.8125rem);
			// font-family: $heading-font;
			// font-weight: 600;
			padding: 0.3rem;
			white-space: nowrap;
			position: relative;
			&::after {
				// fixing a hover hole on svgs
				display: block;
				content: '';
				position: absolute;
				inset: 0;
			}

			&:hover {
				text-decoration: none;
			}
			> svg {
				display: inline-block;
				height: 1em;
				overflow: visible;
				vertical-align: -0.125em;
			}
		}

		&__sub_container {
			position: absolute;
			margin-top: 1.3rem;
			color: var(--bs-dark);
			font-size: .875rem;
			pointer-events: none;
			opacity: 0;
			will-change: auto;
			transition: opacity var(--menu--transition);

			&.menu--active {
				pointer-events: auto;
				opacity: 1;
			}

			&.container-full {
				width: 100%;
				left: 0;
				right: 0;
			}

			@include media-breakpoint-up(lg) {
				&.container-follow {
					width: 650px;
					right: 1rem;
					transform: translateX(-10.4%);
				}
			}
			@media (min-width: 1600px) {
				&.container-follow {
					right: unset;
				}
			}

			.constrain {
				max-width: 77rem;
				margin-right: auto;
				margin-left: auto;
				overflow: hidden;
				@include media-breakpoint-up(lg) {
					box-shadow: var(--menu--desktop-shadow);
				}

				&--smaller {
					max-width: 70rem;
				}
			}
			p:not(.h1, .h2, .h3, .h4, .h5, .h6),
			a {
				font-size: 0.8125rem;
			}
			.text-smaller {
				font-size: 0.6875rem !important;
			}
			ul,
			ol {
				list-style: none;
				margin: 0;
				padding: 0;
			}
			figure {
				margin: 0;
			}
			.hover-chevron {
				.fa-chevron-right {
					color: transparent;
				}

				a:hover .fa-chevron-right {
					color: inherit;
				}
			}
			.mobile-chevron .fa-chevron-right {
				display: none;
			}
			.has-desc {
				display: grid;
				grid-template-columns: 26px auto min-content;
				gap: 0.1rem 1rem;
				grid-template-areas:
					'👨‍🎨 🧳 👉'
					'👨‍🎨 👨‍💻 👨‍💻';
				> figure {
					grid-area: 👨‍🎨;
				}
				> span {
					grid-area: 🧳;
				}
				.fa-chevron-right {
					grid-area: 👉;
				}
				.desc {
					grid-area: 👨‍💻;
					color: var(--bs-gray-600) !important;
					padding-right: clamp(0.6rem, 0.5vw, 1.5rem);
				}
			}
			.grid-article-side {
				display: grid;
				grid-template-columns: 0.55fr 1.45fr;
				gap: 0 1.5rem;
				figure {
					grid-row: 1/-3;
					img {
						aspect-ratio: 16 / 9;
					}
				}
				.cta {
					align-self: end;
				}
				@include media-breakpoint-down(lg) {
					align-items: center;
					gap: 0 0.6rem;
					figure {
						grid-row: unset;
					}
					.cta {
						display: none;
					}
				}
			}
			.generic-cta {
				color: var(--bs-white);
				&:hover {
					color: var(--bs-secondary) !important;
					border-color: var(--bs-secondary);
					&::after {
						background-image: url('data:image/svg+xml,<svg viewBox="0 0 10 8" xmlns="http://www.w3.org/2000/svg"><path fill="%2304213f" d="M0 4.02c0 .2.09.39.24.53s.36.22.57.22h6.42L5.1 6.74a.72.72 0 0 0-.21.52c0 .2.08.38.23.52.15.14.35.22.56.22.21 0 .42-.07.57-.2l3.51-3.25a.72.72 0 0 0 .24-.53c0-.2-.09-.4-.24-.53L6.25.24A.87.87 0 0 0 5.08.22a.75.75 0 0 0-.18.25.7.7 0 0 0 .02.59c.04.09.1.17.18.24l2.13 1.97H.81c-.45 0-.81.33-.81.75Z"/></svg>');
					}
				}
			}
		}
	}

	&__extra-menu {
		background-color: var(--bs-black);
		color: white;
		padding: 0.1rem max(1.5em, (100vw - 90rem) / 2);
		@include media-breakpoint-down(lg) {
			display: none;
		}
		.mega_menu__sub_container {
			margin-top: 0.5rem;
		}
	}

	.extra_menu {
		list-style: none;
		margin: 0;
		padding: 0;
		display: flex;
		flex-direction: row;
		justify-content: flex-end;
		gap: 1rem;
		.mega_menu__item {
			font-weight: 400;
		}

		@include media-breakpoint-down(lg) {
			padding: 1rem;
			flex-direction: column;
			border-top: 1px solid var(--bs-gray-400);
			background-color: var(--bs-gray-200);
			border-radius: var(--menu--border-bottom);
			justify-content: unset;
		}
	}

	.mega_submenu {
		list-style: 0;
		margin: 0;
		padding: 0;

		figure {
			img {
				aspect-ratio: 1/1;
				object-fit: contain;
			}
		}
	}

	// since we don't have bootstrap grid.
	@include media-breakpoint-up(lg) {
		.grid {
			&-2-1 {
				display: grid;
				grid-template-columns: 2fr 1fr;
			}

			&-3-1 {
				display: grid;
				grid-template-columns: 3fr 1fr;
			}

			&-1-3 {
				display: grid;
				grid-template-columns: 1fr 3fr;
			}
			&-2-3 {
				display: grid;
				grid-template-columns: 2fr 3fr;
			}
			&-2-2-3 {
				display: grid;
				grid-template-columns: 0.28fr 0.28fr 0.44fr;
			}

			&-1-1 {
				display: grid;
				grid-template-columns: 1fr 1fr;
			}
			&-1-1-1 {
				display: grid;
				grid-template-columns: 1fr 1fr 1fr;
			}
			&-1-1-2 {
				display: grid;
				grid-template-columns: 1.1fr 1.1fr 2fr;
			}
			&-span-all {
				grid-column: 1/-1;
			}
			&-ai-center {
				align-items: center;
			}
		}

		.order-lg-0 {
			order: 0 !important;
		}

		[href] {
			.text-slide-in {
				> span {
					display: inline-block;
					width: 0;
					opacity: 0;
					overflow: hidden;
					text-wrap: nowrap;
					white-space: nowrap;
					will-change: width;
					transition: width 0.2s ease-in-out, opacity 0.2s ease-in-out;
				}
			}
			&:hover {
				.text-slide-in {
					> span {
						width: 80px;
						opacity: 1;
					}
				}
			}
		}
	}

	// mobile adjustment
	@include media-breakpoint-down(lg) {
		padding: 1rem;
		background-color: var(--menu--bg-color);

		.mega_navigation__bar {
			position: relative;
			grid-template-areas:
				'🌶️ 🍔'
				'🍰 🍰';

			padding: 0.6rem 1rem;
			border-radius: var(--menu--border-top);
			overflow: visible;
			border-bottom: 1px solid;
			border-color: transparent; // prevent layout shift
		}
		.mega_navigation__logo {
			--nav-logo-width: 128px;
			width: var(--nav-logo-width);
			opacity: 1;
			svg {
				width: var(--nav-logo-width); // can no longer clamp due to animation.
				height: auto;
			}
		}

		.mega_navigation__back {
			align-self: center;
			width: 0;
			opacity: 0;
			text-wrap: nowrap;
			white-space: nowrap;
		}
		.mega_navigation__logo,
		.mega_navigation__back {
			overflow: hidden;
			will-change: width, opacity;
			transition: width var(--menu--transition), opacity var(--menu--transition);
		}

		.mega_menu {
			position: absolute;
			pointer-events: none;
			left: -1rem;
			right: -1rem;
			top: calc(0.6rem + 1px); // bottom padding of __bar + 1px border.
			width: calc(100% + 2rem);
			background-color: var(--bs-white);
			box-shadow: var(--menu--mobile-shadow);
			border-radius: var(--menu--border-bottom);
			opacity: 0;

			max-height: calc(100vh - 6rem);
			overflow-x: hidden;
			overflow-y: auto;

			will-change: height;
			transition: height var(--menu--transition);

			&::-webkit-scrollbar {
				width: 0.625rem;
			}
			&::-webkit-scrollbar-track {
				border-radius: 0 0 0.375rem 0;
				background-color: var(--bs-white);
			}
			&::-webkit-scrollbar-thumb {
				border-radius: 5px;
				background-color: var(--bs-primary);
			}

			&__items {
				flex-direction: column;
				padding: 1rem;
				gap: 1.125rem;
				position: relative;
				overflow: visible;
			}
			&__item {
				display: flex;
				justify-content: space-between;
				font-size: 0.825rem;
			}
			&__item {
				color: var(--bs-dark);
			}
			&__sub_container {
				margin-top: 0;
				overflow: hidden;
				top: 0;
				left: 0;
				z-index: 10;
				width: 100%;
				border-radius: var(--menu--border-bottom);
				box-shadow: var(--menu--mobile-shadow);

				transition-property: transform, opacity;
				transition-duration: 0.3s;
				transition-timing-function: ease-in;

				&.menu--active {
					opacity: 1;
					height: auto;
					clip: auto;
					transform: translateX(0);
				}

				&:not(.menu--active) {
					opacity: 0;
					height: 0;
					clip: rect(0, 0, 0, 0);
					transform: translateX(2em);
				}

				.border-left {
					border-left: none !important;
					border-top: 1px solid;
				}
				.annoying-border {
					// 忌 resent
					position: relative;
					&::before {
						content: '';
						border-top: 1px solid var(--bs-gray-400);
						display: block;
						position: absolute;
						top: 0;
						left: -1rem;
						width: calc(100% + 2rem);
						height: 0;
					}
				}
				.break {
					flex-basis: 100%;
					height: 0;
				}
			}

			.hover-chevron .fa-chevron-right {
				color: inherit;
				margin-left: auto;
			}
			.menu-overview {
				.ratio-16\:9 {
					--aspect-ratio: 4 / 1;
				}
			}
			.fa-chevron-down {
				transform: rotate(270deg);
				transform-origin: center 70%;
			}
			.has-desc {
				grid-template-areas: '👨‍🎨 🧳 👉';
				align-items: center;
				.desc {
					display: none;
				}
			}
		}

		&:not(.menu-visible) {
			.mega_navigation__toggle {
				--menu--toggle-angle: 0;
				--menu--toggle-offset: calc(var(--menu--toggle-line-width) * 1.5);
				--menu--toggle-rotation-delay: -2s;
			}
		}

		&.menu-visible {
			.mega_navigation__bar {
				background-color: var(--bs-white);
				border-color: var(--bs-gray-400);
				.mega_navigation__toggle,
				.mega_navigation__logo {
					color: var(--bs-dark);
				}
			}
			.mega_menu {
				opacity: 1;
				pointer-events: all;
			}
		}

		&.mobile-sub-open {
			.mega_navigation__holder .mega_navigation__logo {
				width: 0;
				opacity: 0;
			}
			.mega_navigation__holder .mega_navigation__back {
				width: 72px;
				opacity: 1;
			}
		}
	}
}



rich-text {
    --base: 1rem;
    --gap: var(--base);
    --marker: initial;
    all: unset;
    display: block;

    :is(h1, h2, h3, h4, h5, h6) {
        --gap: 1.5rem;
        line-height: 1.2;

        &:not(:first-child) {
            margin-top: 1.5em !important;
        }
    }

    @for $level from 1 through 6 {
        #{"h" + $level} {
            font-size: #{ 1rem * (math.pow(1.125, 7 - $level)) };
        }
    }

    a {
        &:not([class]) {
            color: var(--#{$prefix}primary);

            &:hover {
                filter: saturate(1.3) brightness(0.85);
            }
        }
    }

    p {
        line-height: 1.7;
        hyphens: auto;

        &:empty {
            display: none;
        }
    }


    strong, b {
        font-weight: 700;
    }

    blockquote {
        font-size: clamp(1rem, 3vw, 1.25rem);
        border-width: .15rem;
        border-color: var(--#{$prefix}primary);
        line-height: 1.5;
        padding: 0 1.5em;

        p {
            font: inherit;
            &::before { content: open-quote  }
            &::after  { content: close-quote }
        }

        cite {
            font-size: .8em;
            font-weight: 500;
            &::before { content: "― "  }
        }
    }

    img {
        margin-inline: calc(var(--gap) * 2.5);
        max-width: min(50ch, 100%);
        
        &[style*="float"] {
            clear: both;

            &[style*="left"] {
                margin-left: 0;
            }

            &[style*="right"] {
                margin-right: 0;
            }
        }
        
    }

    
    ul {
        li::marker { 
            content: var(--marker);
            color: var(--#{$prefix}primary)
             
        }
    }

    :is(ul, ol) {
        --gap: calc( var(--base) * 1.5 );
        padding-left: 1.8ch;
        
        li {
            padding-inline-start: 1.5ch;
            
            + li {
                margin-top: calc( var(--gap) * 0.5 );
            }
        }
    }
    

    > * {
        &:not(:first-child) {
            margin-top: var(--gap);
        }
        
        &:not(:last-child) {
            margin-bottom: var(--gap) !important;
        }
    }

    
}